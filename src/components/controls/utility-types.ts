/* Types for internal usage */

import type {DOMProps, QAProps} from '../types';

import type {TextInputPin, TextInputSize, TextInputView} from './types';

export type TextInputState = 'error';

export type BaseInputProps<T> = DOMProps &
    QAProps & {
        /**
         * Control view. Default: `'normal'`
         */
        view?: TextInputView;
        /**
         * Control size. Default: `'m'`
         */
        size?: TextInputSize;
        /**
         * Corner rounding. Default: `'round-round'`
         */
        pin?: TextInputPin;
        id?: string;
        tabIndex?: number;
        /**
         * HTML name attribute, will be autogenerated if not specified
         */
        name?: string;
        value?: string;
        defaultValue?: string;
        disabled?: boolean;
        placeholder?: string;
        /**
         * Used for managing clear button`s visibility
         */
        hasClear?: boolean;
        autoFocus?: boolean;
        autoComplete?: boolean | 'on' | 'off' | string;
        /**
         * Used for showing error state
         */
        error?: string | boolean;
        /**
         * HTML input element [type](https://devdoc.net/web/developer.mozilla.org/en-US/docs/HTML/Element/Input.html)
         */
        type?: string;
        controlRef?: React.Ref<T>;
        onUpdate?: (value: string) => void;
        onChange?: React.ChangeEventHandler<T>;
        onFocus?: React.FocusEventHandler<T>;
        onBlur?: React.FocusEventHandler<T>;
        onKeyDown?: React.KeyboardEventHandler<T>;
        onKeyUp?: React.KeyboardEventHandler<T>;
        onKeyPress?: React.KeyboardEventHandler<T>;
    };
